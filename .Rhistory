TRUE ~ azul_claro),
tipo_valor = factor(tipo_valor,
levels = c("valor_de_verdade", "em_branco")),
variavel = factor(variavel, levels = rev(c("dc", "ded", "dcl"))),
medias = replace(medias, medias == "media_regiao", "Média da Região"),
medias = replace(medias, medias == "media_nacional", "Média Nacional"))
}
plota_card_estado <- function(dados) {
ggplot(dados, aes(x = variavel, y = valor, fill = cores)) +
geom_col(position = "stack", width = 0.5) +
geom_tile(aes(y = valor_media), color = azul, width = 0.7, height = 1, linetype = "dotted") +
geom_text(aes(y = valor_media,
label = paste0(medias, "\nR$ ",
format(round(valor_media/1e9, 2), big.mark = ".", decimal.mark = ","), " bi"),
vjust = ifelse(medias == "Média Nacional", 2.7, -1.9)), family = "Open Sans Condensed",
size = 3.5, color = "dimgrey", hjust = "inward") +
geom_label(aes(label = ifelse(tipo_valor == "valor_de_verdade" & medias == "Média da Região",
paste0("R$ ", format(round(valor/1e9, 2),
big.mark = ".",
decimal.mark = ","),
" bi"),
NA),
y = valor,
color = cores),
family = "Open Sans", size = 3.5, hjust = "center",
position = "stack", vjust = "center", fill = "white") +
scale_fill_identity() +
scale_color_identity() +
scale_y_continuous(labels=function(x) {format(x/1e9, big.mark = ".", decimal.mark=",", scientific = FALSE)}, expand = expand_scale(mult = c(.05, .1))) +
scale_x_discrete(labels = c("ded" = "Deduções",
"dc"  = "Dívida\nConsolidada",
"dcl" = "Dívida\nConsolidada\nLíquida")) +
labs(x = NULL, y = "R$ bilhões") +
coord_flip() +
tema() + theme(axis.text.y = element_text(size = 12)) + theme(axis.line.x = element_line())
}
mapa_brasil <- geojsonio::geojson_read("./dados/brazil_geo.geojson", what = "sp")
# testando esse simplify
mapa_brasil <- rmapshaper::ms_simplify(mapa_brasil)
mapa_brasil@data <- sumario_estados %>%
select(UF, REGIAO, pct_DCL_RCL) %>%
right_join(mapa_brasil@data, by = c("UF" = "sigla"))
mapa_brasil@data <- mapa_brasil@data %>%
left_join(estados)
bins <- c(-20, 0, 20, 40, 60, 80, 100, 200, Inf)
pal <- colorBin("YlOrRd", domain = mapa_brasil$DCL, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>DCL/RCL: %g &#37;",
mapa_brasil$nomes, mapa_brasil$pct_DCL_RCL
) %>% lapply(htmltools::HTML)
faz_mapa <- function() {
leaflet(mapa_brasil, options = leafletOptions(minZoom = 3.7, maxZoom = 4.5, dragging = FALSE)) %>%
setView(lat=-14.235, lng=-51.9253 , zoom=4.5) %>%
addPolygons(
fillColor = ~pal(pct_DCL_RCL),
weight = 3,
opacity = 1,
color = "white",
fillOpacity = 0.8,
highlight = highlightOptions(
weight = 3,
color = "#353E57",
fillOpacity = 1,
bringToFront = TRUE),
label = labels,
layerId = ~UF,  # muito importante, vai alimentar o "id" do shape_click
labelOptions = labelOptions(
style = list("font-weight" = "normal",
"font-family" = "'Open Sans'",
padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
}
retorna_texto <- function(estado, variavel) {
resultado <- sumario_estados_regionalizado %>%
filter(UF == estado) %>%
select(!!sym(variavel))
return (as.character(resultado[1,1]))
}
leafletOutput("mapa")
output$mapa <- renderLeaflet({
faz_mapa()
})
obtem_estado_click <- function() {
click <- input$mapa_shape_click
if (is.null(click))
uf <- "AC"
else
uf <- click$id
return(uf)
}
fillCol(height = 660, flex = NA,
textOutput("Estado"),
textOutput("regiao"),
tagAppendAttributes(textOutput("pop"), style="font-family: 'Open Sans'; padding-top: 5px;"),
#textOutput("DCLperCap"),
tags$style(type="text/css", "#Estado {font-family: 'Open Sans'; font-size: 2em; color: #1f476a; padding-bottom: 5px; font-weight: bold;}"),
tags$style(type="text/css", "#regiao {font-family: 'Open Sans'; font-size: 1.2em; padding-bottom: 5px; padding-top: 5px;}"),
tagAppendAttributes(textOutput("DCL_RCL", container = span), style="font-family: 'Open Sans'"),
tagAppendAttributes(textOutput("DCL_RCL_valor_acima", container = span), style="font-family: 'Open Sans';
color: firebrick;"),
tagAppendAttributes(textOutput("DCL_RCL_valor_abaixo", container = span), style="font-family: 'Open Sans';"),
tagAppendAttributes(textOutput("rankingDCL", container = span), style="font-family: 'Open Sans'"),
tagAppendAttributes(textOutput("DCLperCap"), style="font-family: 'Open Sans'"),
plotOutput("card")
)
output$Estado    <- renderText(retorna_texto(obtem_estado_click(), "nomes"))
output$regiao    <- renderText(paste0("Região ", retorna_texto(obtem_estado_click(), "REGIAO")))
output$pop       <- renderText(paste0("População: ",
format(
round(
as.numeric(
retorna_texto(obtem_estado_click(), "pop")
),
2),
big.mark = ".", decimal.mark = ","),
" pessoas",
" (é o ",
retorna_texto(obtem_estado_click(), "pop_ranking"),
"º mais populoso)."))
output$DCL_RCL <- renderText("A DCL do Estado corresponde a ")
output$DCL_RCL_valor_acima <- function(){
vlr <- as.numeric(retorna_texto(obtem_estado_click(), "pct_DCL_RCL"))
if (vlr >= 200) {
return(paste0(percent(round(vlr/100,2)), " de sua RCL"))
} else {
return("")
}
}
output$DCL_RCL_valor_abaixo <- function(){
vlr <- as.numeric(retorna_texto(obtem_estado_click(), "pct_DCL_RCL"))
if (vlr >= 200) {
return("")
} else {
return(paste0(percent(round(vlr/100,2)), " de sua RCL"))
}
}
output$rankingDCL <- renderText(paste0(" (é a ", retorna_texto(obtem_estado_click(), "dcl_ranking"),
"ª maior relação DCL/RCL)."))
output$DCLperCap <- renderText(paste0("DCL por habitante: R$ ",
format(round(as.numeric(retorna_texto(obtem_estado_click(), "DCL_pop")),2),
big.mark = ".", decimal.mark = ","),
" (é a ", retorna_texto(obtem_estado_click(), "per_cap_ranking"),
"ª maior DCL per capita)."))
output$card <- renderPlot(
plota_card_estado(sumario_grafico(obtem_estado_click())), width = "auto", height = 400)
mainPanel(width = "95%",
selectInput("mun", label = "", choices = sumario_mun$mun_UF, selected = "Imbituba - SC", multiple = FALSE),
plotOutput("swarm")
)
output$swarm <- renderPlot(plota_swarm(input$mun), width = "auto", height = 400)
fillCol(height = 660, flex = NA,
textOutput("Municipio"),
tags$style(type="text/css", "#Municipio {font-family: 'Open Sans'; font-size: 2em; color: #1f476a; padding-bottom: 5px; font-weight: bold;}"),
tagAppendAttributes(textOutput("mun_UF"), style="font-family: 'Open Sans'; font-size: 1.7em; padding-bottom: 3px; font-weight: 400;"),
textOutput("reg"),
tags$style(type="text/css", "#reg {font-family: 'Open Sans'; font-size: 1.2em; padding-bottom: 5px; padding-top: 5px;}"),
tagAppendAttributes(textOutput("mun_pop"), style="font-family: 'Open Sans'; padding-top: 5px;"),
tagAppendAttributes(textOutput("mun_DCL_RCL", container = span), style="font-family: 'Open Sans'"),
tagAppendAttributes(textOutput("mun_DCL_RCL_valor_acima", container = span), style="font-family: 'Open Sans'; color: firebrick;"),
tagAppendAttributes(textOutput("mun_DCL_RCL_valor_abaixo", container = span), style="font-family: 'Open Sans';"),
tagAppendAttributes(textOutput("mun_rankingDCL", container = span), style="font-family: 'Open Sans'"),
tagAppendAttributes(textOutput("mun_DCLperCap"), style="font-family: 'Open Sans'"),
plotOutput("mun_card")
)
output$Municipio    <- renderText(retorna_texto_mun(input$mun, "nome_mun"))
output$reg    <- renderText(paste0("Região ", retorna_texto_mun(input$mun, "REGIAO")))
output$mun_UF    <- renderText(retorna_texto_mun(input$mun, "nomes"))
output$mun_pop       <- renderText(paste0("População: ",
format(
round(
as.numeric(
retorna_texto_mun(input$mun, "pop")
),
2),
big.mark = ".", decimal.mark = ","),
" pessoas",
" (é o ",
retorna_texto_mun(input$mun, "rank_pop"),
"º mais populoso)."))
output$mun_DCL_RCL <- renderText("A DCL do município corresponde a ")
output$mun_DCL_RCL_valor_acima <- function(){
vlr <- as.numeric(retorna_texto_mun(input$mun, "pct_DCL_RCL"))
if (vlr >= 120) {
return(paste0(percent(round(vlr/100,2)), " de sua RCL"))
} else {
return("")
}
}
output$mun_DCL_RCL_valor_abaixo <- function(){
vlr <- as.numeric(retorna_texto_mun(input$mun, "pct_DCL_RCL"))
if (vlr >= 120) {
return("")
} else {
return(paste0(percent(round(vlr/100,2)), " de sua RCL"))
}
}
output$mun_rankingDCL <- renderText(paste0(" (é a ", retorna_texto_mun(input$mun, "rank_DCL_RCL"),
"ª maior relação DCL/RCL)."))
output$mun_DCLperCap <- renderText(paste0("DCL por habitante: R$ ",
format(round(as.numeric(retorna_texto_mun(input$mun, "dcl_pop")),2),
big.mark = ".", decimal.mark = ","),
" (é a ", retorna_texto_mun(input$mun, "rank_dcl_pop"),
"ª maior DCL per capita)."))
output$mun_card <- renderPlot(
plota_card_mun(sumario_graf_mun(input$mun)), width = "auto", height = 400)
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/9.  Trabalho Divida/Modelo')
library(ggplot2)
library(plotly)
library(plyr)
library(flexdashboard)
# Make some noisily increasing data
set.seed(955)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = 1:20 + rnorm(20,sd=3),
yvar = 1:20 + rnorm(20,sd=3))
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1)      # Use hollow circles
ggplotly(p)
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)   # Add linear regression line
ggplotly(p)
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth()            # Add a loess smoothed fit curve with confidence region
ggplotly(p)
n <- 20
x1 <- rnorm(n); x2 <- rnorm(n)
y1 <- 2 * x1 + rnorm(n)
y2 <- 3 * x2 + (2 + rnorm(n))
A <- as.factor(rep(c(1, 2), each = n))
df <- data.frame(x = c(x1, x2), y = c(y1, y2), A = A)
fm <- lm(y ~ x + A, data = df)
p <- ggplot(data = cbind(df, pred = predict(fm)), aes(x = x, y = y, color = A))
p <- p + geom_point() + geom_line(aes(y = pred))
ggplotly(p)
dfGamma = data.frame(nu75 = rgamma(100, 0.75),
nu1 = rgamma(100, 1),
nu2 = rgamma(100, 2))
dfGamma = stack(dfGamma)
p <- ggplot(dfGamma, aes(x = values)) +
stat_density(aes(group = ind, color = ind),position="identity",geom="line")
ggplotly(p)
dim1 <- c(rnorm(100, mean=1), rnorm(100, mean=4))
dim2 <- rnorm(200, mean=1)
cat <- factor(c(rep("a", 100), rep("b", 100)))
mydf <- data.frame(cbind(dim2, dim1, cat))
p <- ggplot(data=mydf, aes(x=dim1, y=dim2, colour=as.factor(cat))) +
geom_point() +
stat_density(aes(x=dim1, y=(-2+(..scaled..))),
position="identity", geom="line")
stuff <- ggplot_build(p)
xrange <- stuff[[2]]$ranges[[1]]$x.range  # extract the x range to make the
# new densities align with y-axis
## Get densities of dim2
ds <- do.call(rbind, lapply(unique(mydf$cat), function(lev) {
dens <- with(mydf, density(dim2[cat==lev]))
data.frame(x=dens$y+xrange[1], y=dens$x, cat=lev)
}))
library(ggplot2)
library(plotly)
library(plyr)
library(flexdashboard)
# Make some noisily increasing data
set.seed(955)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = 1:20 + rnorm(20,sd=3),
yvar = 1:20 + rnorm(20,sd=3))
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1)      # Use hollow circles
ggplotly(p)
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)   # Add linear regression line
ggplotly(p)
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth()            # Add a loess smoothed fit curve with confidence region
ggplotly(p)
n <- 20
x1 <- rnorm(n); x2 <- rnorm(n)
y1 <- 2 * x1 + rnorm(n)
y2 <- 3 * x2 + (2 + rnorm(n))
A <- as.factor(rep(c(1, 2), each = n))
df <- data.frame(x = c(x1, x2), y = c(y1, y2), A = A)
fm <- lm(y ~ x + A, data = df)
p <- ggplot(data = cbind(df, pred = predict(fm)), aes(x = x, y = y, color = A))
p <- p + geom_point() + geom_line(aes(y = pred))
ggplotly(p)
dfGamma = data.frame(nu75 = rgamma(100, 0.75),
nu1 = rgamma(100, 1),
nu2 = rgamma(100, 2))
dfGamma = stack(dfGamma)
p <- ggplot(dfGamma, aes(x = values)) +
stat_density(aes(group = ind, color = ind),position="identity",geom="line")
ggplotly(p)
dim1 <- c(rnorm(100, mean=1), rnorm(100, mean=4))
dim2 <- rnorm(200, mean=1)
cat <- factor(c(rep("a", 100), rep("b", 100)))
mydf <- data.frame(cbind(dim2, dim1, cat))
p <- ggplot(data=mydf, aes(x=dim1, y=dim2, colour=as.factor(cat))) +
geom_point() +
stat_density(aes(x=dim1, y=(-2+(..scaled..))),
position="identity", geom="line")
stuff <- ggplot_build(p)
xrange <- stuff[[2]]$ranges[[1]]$x.range  # extract the x range to make the
# new densities align with y-axis
## Get densities of dim2
#ds <- do.call(rbind, lapply(unique(mydf$cat), function(lev) {
#dens <- with(mydf, density(dim2[cat==lev]))
#data.frame(x=dens$y+xrange[1], y=dens$x, cat=lev)
#}))
#p <- p + geom_path(data=ds, aes(x=x, y=y, color=factor(cat)))
#ggplotly(p)
dd<-data.frame(matrix(rnorm(144, mean=2, sd=2),72,2),c(rep("A",24),rep("B",24),rep("C",24)))
colnames(dd) <- c("x_value", "Predicted_value",  "State_CD")
dd <- data.frame(
predicted = rnorm(72, mean = 2, sd = 2),
state = rep(c("A", "B", "C"), each = 24)
)
grid <- with(dd, seq(min(predicted), max(predicted), length = 100))
normaldens <- ddply(dd, "state", function(df) {
data.frame(
predicted = grid,
density = dnorm(grid, mean(df$predicted), sd(df$predicted))
)
})
p <- ggplot(dd, aes(predicted))  +
geom_density() +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ state)
ggplotly(p)
df <- data.frame(x <- rchisq(1000, 10, 10),
y <- rnorm(1000))
p <- ggplot(df, aes(x, y)) +
geom_point(alpha = 0.5) +
geom_density_2d() +
theme(panel.background = element_rect(fill = '#ffffff'))
ggplotly(p)
img(src='Mapa.png')
img(src='Mapa.png')
#img(src='Mapa.png')
include_graphics(Imagens/Mapa.png)
#img(src='Mapa.png')
include_graphics('Imagens/Mapa.png')
#img(src='Mapa.png')
include_graphics('Imagens/Mapa.png', width = 100, height =100)
library(ggplot2)
library(plotly)
library(plyr)
library(flexdashboard)
library(knitr)
#img(src='Mapa.png')
include_graphics('Imagens/Mapa.png', width = 100, height =100)
#img(src='Mapa.png')
include_graphics('Imagens/Mapa.png', dpi = 72)
library(png)
#img(src='Mapa.png')
include_graphics('Imagens/Mapa.png')
#img(src='Mapa.png')
include_graphics('Imagens/Mapa.png')
img(src='www/Mapa.png',width="70%")
#include_graphics('Imagens/Mapa.png')
img(src='www/Mapa.png',width="70%")
shiny::runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/9.  Trabalho Divida/Modelo')
shiny::runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/9.  Trabalho Divida/Modelo')
shiny::runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/18. Cachorro Louco - CODIP/Mad_Dog')
library(shiny); runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/18. Cachorro Louco - CODIP/Mad_Dog/lft.R')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/18. Cachorro Louco - CODIP/Mad_Dog/lft.R')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/18. Cachorro Louco - CODIP/Mad_Dog/lft.R')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/18. Cachorro Louco - CODIP/Mad_Dog/lft.R')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/18. Cachorro Louco - CODIP/Mad_Dog/lft.R')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/18. Cachorro Louco - CODIP/Mad_Dog/lft.R')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/18. Cachorro Louco - CODIP/Mad_Dog')
load("LTN_2.Rdata", envir=.GlobalEnv)
load("LTN_2_99.Rdata", envir=.GlobalEnv)
View(proposta_ltn_2)
load("LTN_4.Rdata", envir=.GlobalEnv)
View(proposta_ltn_2)
load("LTN_2.Rdata", envir=.GlobalEnv)
View(proposta_ltn_2)
load("LTN_6_meses.Rdata", envir=.GlobalEnv)
proposta_ltn_6_meses <- proposta_ltn_2
load("LTN_6_meses_99.Rdata", envir=.GlobalEnv)
proposta_ltn_6_meses_99 <- proposta_ltn_2_99
load("LTN_1.Rdata", envir=.GlobalEnv)
proposta_ltn_1_ano <- proposta_ltn_2
load("LTN_1_99.Rdata", envir=.GlobalEnv)
proposta_ltn_1_ano_99 <- proposta_ltn_2_99
load("LTN_6_meses.Rdata", envir=.GlobalEnv)
proposta_ltn_6_meses <- proposta_ltn_2
load("LTN_6_meses_99.Rdata", envir=.GlobalEnv)
proposta_ltn_6_meses_99 <- proposta_ltn_2_99
View(proposta_ltn_6_meses)
View(proposta_ltn_6_meses_99)
load("LTN_1.Rdata", envir=.GlobalEnv)
proposta_ltn_1_ano <- proposta_ltn_2
load("LTN_1_99.Rdata", envir=.GlobalEnv)
proposta_ltn_1_ano_99 <- proposta_ltn_2_99
View(proposta_ltn_1_ano)
load("LTN_6_meses.Rdata", envir=.GlobalEnv)
proposta_ltn_6_meses <- proposta_ltn_2
load("LTN_6_meses_99.Rdata", envir=.GlobalEnv)
proposta_ltn_6_meses_99 <- proposta_ltn_2_99
load("LTN_1.Rdata", envir=.GlobalEnv)
proposta_ltn_1_ano <- proposta_ltn_2
load("LTN_1_99.Rdata", envir=.GlobalEnv)
proposta_ltn_1_ano_99 <- proposta_ltn_2_99
load("LTN_2.Rdata", envir=.GlobalEnv)
proposta_ltn_2_ano <- proposta_ltn_2
load("LTN_2_99.Rdata", envir=.GlobalEnv)
proposta_ltn_2_ano_99 <- proposta_ltn_2_99
load("LTN_4.Rdata", envir=.GlobalEnv)
proposta_ltn_4_ano <- proposta_ltn_2
load("LTN_4_99.Rdata", envir=.GlobalEnv)
proposta_ltn_4_ano_99 <- proposta_ltn_2_99
load("NTN_F_7.Rdata", envir=.GlobalEnv)
proposta_ntn_f_7_ano <- proposta_ltn_2
load("NTN_F_7_99.Rdata", envir=.GlobalEnv)
proposta_ntn_f_7_ano_99 <- proposta_ltn_2_99
load("NTN_F_10.Rdata", envir=.GlobalEnv)
proposta_ntn_f_10_ano <- proposta_ltn_2
load("NTN_F_10_99.Rdata", envir=.GlobalEnv)
proposta_ntn_f_10_ano_99 <- proposta_ltn_2_99
View(proposta_ntn_f_10_ano)
View(proposta_ltn_6_meses)
nrow(proposta_ltn_6_meses$Titulo_data)
nrow(proposta_ltn_6_meses)
load("Garantias.Rdata", envir=.GlobalEnv)
setwd("C:/Users/lucas.leite/Desktop/Lucas/RStudio/16. Painel Garantias - CODIV - SUDIP")
load("Garantias.Rdata", envir=.GlobalEnv)
View(agrupador_total)
agrupador_formatado_estados <- agrupador_total_formatado %>%
filter(!(Classificador == "Estados"))
library(ggplot2)
library(plotly)
library(plyr)
library(flexdashboard)
library(knitr)
library(png)
library(shiny)
library(readxl)
library(tidyr)
library(knitr)
library(lubridate)
library(ggplot2)
library(plotly)
library(stringr)
library(dplyr)
library(shinydashboard)
library(bizdays)
library(matrixStats)
library(rlang)
library(rmarkdown)
library(kableExtra)
library(hpackedbubble)
agrupador_formatado_estados <- agrupador_total_formatado %>%
filter(!(Classificador == "Estados"))
grupos <- c("Todas","Estados", "Bancos Federais", "Municípios","Estatais Federais","Entidades Estaduais Controladas","Empresas Privatizadas")
agrupador_total_formatado <- agrupador_total %>%
filter(!(Inicio %in% grupos)) %>%
mutate(total_total = as.character(total_total),
total_total = str_replace_all(total_total,"\\.",""),
total_total = str_replace_all(total_total,",","\\."),
total_total = as.numeric(total_total),
interna_total = numero(interna_total),
interna_USD = numero(interna_USD),
externa_total = numero(externa_total)
)
agrupador_formatado_estados <- agrupador_total_formatado %>%
filter(!(Classificador == "Estados"))
agrupador_total_formatado <- agrupador_total %>%
filter(!(Inicio %in% grupos)) %>%
mutate(total_total = as.character(total_total),
total_total = str_replace_all(total_total,"\\.",""),
total_total = str_replace_all(total_total,",","\\."),
total_total = as.numeric(total_total),
interna_total = numero(interna_total),
interna_USD = numero(interna_USD),
externa_total = numero(externa_total)
)
funcao_formata_quantidade <- function(x){
paste0(format(round(x/1000000, 2), big.mark = ".", decimal.mark = ","))
}
formata <- function(x){
paste0("R$", format(round(x, 2), big.mark = ".", decimal.mark = ","), " mi")
}
numero <- function(x){
a <- as.character(x)
b <- str_replace_all(a,"\\.","")
c <- str_replace_all(b,",","\\.")
d <- as.numeric(c)
return(d)
}
grupos <- c("Todas","Estados", "Bancos Federais", "Municípios","Estatais Federais","Entidades Estaduais Controladas","Empresas Privatizadas")
agrupador_total_formatado <- agrupador_total %>%
filter(!(Inicio %in% grupos)) %>%
mutate(total_total = as.character(total_total),
total_total = str_replace_all(total_total,"\\.",""),
total_total = str_replace_all(total_total,",","\\."),
total_total = as.numeric(total_total),
interna_total = numero(interna_total),
interna_USD = numero(interna_USD),
externa_total = numero(externa_total)
)
agrupador_formatado_estados <- agrupador_total_formatado %>%
filter(!(Classificador == "Estados"))
View(agrupador_formatado_estados)
agrupador_formatado_estados <- agrupador_total_formatado %>%
filter((Classificador == "Estados"))
View(agrupador_atm_completo)
