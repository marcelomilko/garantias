packedbubbleMinSize = "10%",
packedbubbleMaxSize = "300%",
theme = "sunset",
packedbubbleZMin = 0,
packedbubbleZmax = 1000, split = 1,
gravitational = 0.02,
parentNodeLimit = 1,
dragBetweenSeries = 0,
seriesInteraction = 0,
width = "100%")
grupos <- c("Todas","Estados", "Bancos Federais", "Municípios","Estatais Federais","Entidades Estaduais Controladas","Empresas Privatizadas")
agrupador_total_formatado <- agrupador_total %>%
filter(!(Inicio %in% grupos)) %>%
mutate(total_total = as.character(total_total),
total_total = str_replace_all(total_total,"\\.",""),
total_total = str_replace_all(total_total,",","\\."),
total_total = as.numeric(total_total),
total_total = round(total_total/1000000000,2))
hpackedbubble(agrupador_total_formatado$Classificador, agrupador_total_formatado$Inicio, agrupador_total_formatado$total_total,
title = "Dívidas Garantidas pela União",
pointFormat = "<b>{point.name}:</b>R$ {point.y} Milhões ",
dataLabelsFilter = 100,
packedbubbleMinSize = "10%",
packedbubbleMaxSize = "300%",
theme = "sunset",
packedbubbleZMin = 0,
packedbubbleZmax = 1000, split = 1,
gravitational = 0.02,
parentNodeLimit = 0,
dragBetweenSeries = 0,
seriesInteraction = 0,
width = "100%")
grupos <- c("Todas","Estados", "Bancos Federais", "Municípios","Estatais Federais","Entidades Estaduais Controladas","Empresas Privatizadas")
agrupador_total_formatado <- agrupador_total %>%
filter(!(Inicio %in% grupos)) %>%
mutate(total_total = as.character(total_total),
total_total = str_replace_all(total_total,"\\.",""),
total_total = str_replace_all(total_total,",","\\."),
total_total = as.numeric(total_total),
total_total = round(total_total/1000000000,2))
hpackedbubble(agrupador_total_formatado$Classificador, agrupador_total_formatado$Inicio, agrupador_total_formatado$total_total,
title = "Dívidas Garantidas pela União",
pointFormat = "<b>{point.name}:</b>R$ {point.y} Milhões ",
dataLabelsFilter = 10,
packedbubbleMinSize = "10%",
packedbubbleMaxSize = "300%",
theme = "sunset",
packedbubbleZMin = 0,
packedbubbleZmax = 1000, split = 1,
gravitational = 0.02,
parentNodeLimit = 1,
dragBetweenSeries = 0,
seriesInteraction = 0,
width = "100%")
grupos <- c("Todas","Estados", "Bancos Federais", "Municípios","Estatais Federais","Entidades Estaduais Controladas","Empresas Privatizadas")
agrupador_total_formatado <- agrupador_total %>%
filter(!(Inicio %in% grupos)) %>%
mutate(total_total = as.character(total_total),
total_total = str_replace_all(total_total,"\\.",""),
total_total = str_replace_all(total_total,",","\\."),
total_total = as.numeric(total_total),
total_total = round(total_total/1000000000,2))
hpackedbubble(agrupador_total_formatado$Classificador, agrupador_total_formatado$Inicio, agrupador_total_formatado$total_total,
title = "Dívidas Garantidas pela União",
pointFormat = "<b>{point.name}:</b>R$ {point.y} Milhões ",
dataLabelsFilter = 1,
packedbubbleMinSize = "10%",
packedbubbleMaxSize = "300%",
theme = "sunset",
packedbubbleZMin = 0,
packedbubbleZmax = 1000, split = 1,
gravitational = 0.02,
parentNodeLimit = 1,
dragBetweenSeries = 0,
seriesInteraction = 0,
width = "100%")
grupos <- c("Todas","Estados", "Bancos Federais", "Municípios","Estatais Federais","Entidades Estaduais Controladas","Empresas Privatizadas")
agrupador_total_formatado <- agrupador_total %>%
filter(!(Inicio %in% grupos)) %>%
mutate(total_total = as.character(total_total),
total_total = str_replace_all(total_total,"\\.",""),
total_total = str_replace_all(total_total,",","\\."),
total_total = as.numeric(total_total),
total_total = round(total_total/1000000000,3))
hpackedbubble(agrupador_total_formatado$Classificador, agrupador_total_formatado$Inicio, agrupador_total_formatado$total_total,
title = "Dívidas Garantidas pela União",
pointFormat = "<b>{point.name}:</b>R$ {point.y} Bilhões ",
dataLabelsFilter = 1,
packedbubbleMinSize = "10%",
packedbubbleMaxSize = "300%",
theme = "sunset",
packedbubbleZMin = 0,
packedbubbleZmax = 1000, split = 1,
gravitational = 0.02,
parentNodeLimit = 1,
dragBetweenSeries = 0,
seriesInteraction = 0,
width = "100%")
grupos <- c("Todas","Estados", "Bancos Federais", "Municípios","Estatais Federais","Entidades Estaduais Controladas","Empresas Privatizadas")
agrupador_total_formatado <- agrupador_total %>%
filter(!(Inicio %in% grupos)) %>%
mutate(total_total = as.character(total_total),
total_total = str_replace_all(total_total,"\\.",""),
total_total = str_replace_all(total_total,",","\\."),
total_total = as.numeric(total_total),
total_total = round(total_total/1000000000,3))
hpackedbubble(agrupador_total_formatado$Classificador, agrupador_total_formatado$Inicio, agrupador_total_formatado$total_total,
title = "Dívidas Garantidas pela União",
pointFormat = "<b>{point.name}:</b>R$ {point.y} Bilhões ",
dataLabelsFilter = 0.1,
packedbubbleMinSize = "10%",
packedbubbleMaxSize = "300%",
theme = "sunset",
packedbubbleZMin = 0,
packedbubbleZmax = 1000, split = 1,
gravitational = 0.02,
parentNodeLimit = 1,
dragBetweenSeries = 0,
seriesInteraction = 0,
width = "100%")
grupos <- c("Todas","Estados", "Bancos Federais", "Municípios","Estatais Federais","Entidades Estaduais Controladas","Empresas Privatizadas")
agrupador_total_formatado <- agrupador_total %>%
filter(!(Inicio %in% grupos)) %>%
mutate(total_total = as.character(total_total),
total_total = str_replace_all(total_total,"\\.",""),
total_total = str_replace_all(total_total,",","\\."),
total_total = as.numeric(total_total),
total_total = round(total_total/1000000000,3))
hpackedbubble(agrupador_total_formatado$Classificador, agrupador_total_formatado$Inicio, agrupador_total_formatado$total_total,
title = "Dívidas Garantidas pela União",
pointFormat = "<b>{point.name}:</b>R$ {point.y} Bilhões ",
dataLabelsFilter = 0.1,
packedbubbleMinSize = "10%",
packedbubbleMaxSize = "200%",
theme = "sunset",
packedbubbleZMin = 0,
packedbubbleZmax = 1000, split = 1,
gravitational = 0.02,
parentNodeLimit = 1,
dragBetweenSeries = 1,
seriesInteraction = 0,
width = "100%")
grupos <- c("Todas","Estados", "Bancos Federais", "Municípios","Estatais Federais","Entidades Estaduais Controladas","Empresas Privatizadas")
agrupador_total_formatado <- agrupador_total %>%
filter(!(Inicio %in% grupos)) %>%
mutate(total_total = as.character(total_total),
total_total = str_replace_all(total_total,"\\.",""),
total_total = str_replace_all(total_total,",","\\."),
total_total = as.numeric(total_total),
total_total = round(total_total/1000000000,3))
hpackedbubble(agrupador_total_formatado$Classificador, agrupador_total_formatado$Inicio, agrupador_total_formatado$total_total,
title = "Dívidas Garantidas pela União",
pointFormat = "<b>{point.name}:</b>R$ {point.y} Bilhões ",
dataLabelsFilter = 0.1,
packedbubbleMinSize = "10%",
packedbubbleMaxSize = "200%",
theme = "sunset",
packedbubbleZMin = 0,
packedbubbleZmax = 10000, split = 1,
gravitational = 0.02,
parentNodeLimit = 1,
dragBetweenSeries = 0,
seriesInteraction = 0,
width = "100%")
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20)
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(datasets)
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20)
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(datasets)
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20)
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20)
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
install.packages("bsselectR")
library(bsselectR)
install.packages("bsselectR")
devtools::install_github("walkerke/bsselectR")
library(bsselectR)
quotes <- c("Look deep into nature, and then you will understand everything better.",
"A fool thinks himself to be wise, but a wise man knows himself to be a fool.",
"My mission in life is not merely to survive, but to thrive; and to do so with some passion, some compassion, some humor, and some style.")
names(quotes) <- c("Einstein", "Shakespeare", "Angelou")
bsselect(quotes, type = "text")
bsselect(quotes, type = "text")
library(bsselectR)
quotes <- c("Look deep into nature, and then you will understand everything better.",
"A fool thinks himself to be wise, but a wise man knows himself to be a fool.",
"My mission in life is not merely to survive, but to thrive; and to do so with some passion, some compassion, some humor, and some style.")
names(quotes) <- c("Einstein", "Shakespeare", "Angelou")
names(quotes) <- c("ae", "Shakespeare", "Angelou")
bsselect(quotes, type = "text")
library(bsselectR)
quotes <- c("Look deep into nature, and then you will understand everything better.",
"A fool thinks himself to be wise, but a wise man knows himself to be a fool.",
"My mission in life is not merely to survive, but to thrive; and to do so with some passion, some compassion, some humor, and some style.")
names(quotes) <- c("Einstein", "Shakespeare", "Angelou")
bsselect(quotes, type = "text")
library(bsselectR)
names(quotes) <- agrupador_total$Classificador
bsselect(agrupador_total$total_total)
help(bsselectR)
agrupador_total$total_total
selectInput("n_breaks", label = "Grupo Mutuário",
choices = agrupador_total$Classificador, selected = agrupador_total$Classificador[2,1])
selectInput("n_breaks", label = "Grupo Mutuário",
choices = agrupador_total$Classificador, selected = agrupador_total$Classificador[2,1])
selectInput("n_breaks", label = "Grupo Mutuário",
choices = agrupador_total$Classificador, selected = agrupador_total$Classificador[2,1])
selectInput("n_breaks", label = "Grupo Mutuário",
choices = agrupador_total$Classificador, selected = agrupador_total$Classificador[1])
Mutuario_escolha <- agrupador_total %>%
filter(grupo == Classificador)
library(shiny)
library(readxl)
library(tidyr)
library(knitr)
library(lubridate)
library(ggplot2)
library(plotly)
library(stringr)
library(dplyr)
library(shinydashboard)
library(flexdashboard)
library(bizdays)
library(matrixStats)
library(rlang)
library(rmarkdown)
library(kableExtra)
library(hpackedbubble)
Mutuario_escolha <- agrupador_total %>%
filter(grupo == Classificador)
Mutuario_escolha <- agrupador_total %>%
filter(input$grupo == Classificador)
column(4,
selectInput("teste", label = "Grupo Mutuário",
choices = agrupador_total_formatado$Classificador, selected = agrupador_total$Classificador[1])
)
Mutuario_escolha <- agrupador_total %>%
filter(input$teste == Classificador)
column(4,
selectInput("mutuario", label = "Mutuário",
choices = agrupador_total_formatado$Inicio, selected = agrupador_total$Inicio[1])
)
Mutuario_escolha <- agrupador_total %>%
filter(input$teste == Classificador)
column(4,
selectInput("teste", label = "Grupo Mutuário",
choices = agrupador_total_formatado$Classificador, selected = agrupador_total$Classificador[1])
)
column(4,
selectInput("mutuario", label = "Mutuário",
choices = agrupador_total$Inicio)
)
vida <- reactive({
list(input$teste, input$mutuario)
})
observeEvent(vida(),{
if(input$teste != "Todos"){
correto <- agrupador_total %>%
filter(Inicio == input$teste) }
observe({
updateSelectInput(session, "mutuario",
label = "Referência (anos)",
choices = correto$Inicio,
selected = correto$Inicio[1] )
})
})
library(shiny)
library(readxl)
library(tidyr)
library(knitr)
library(lubridate)
library(ggplot2)
library(plotly)
library(stringr)
library(dplyr)
library(shinydashboard)
library(flexdashboard)
library(bizdays)
library(matrixStats)
library(rlang)
library(rmarkdown)
library(kableExtra)
library(hpackedbubble)
load("Garantias.Rdata", envir=.GlobalEnv)
funcao_formata_quantidade <- function(x){
paste0(format(round(x/1000000, 2), big.mark = ".", decimal.mark = ","))
}
formata <- function(x){
paste0("R$", format(round(x, 2), big.mark = ".", decimal.mark = ","), " mi")
}
grupos <- c("Todas","Estados", "Bancos Federais", "Municípios","Estatais Federais","Entidades Estaduais Controladas","Empresas Privatizadas")
agrupador_total_formatado <- agrupador_total %>%
filter(!(Inicio %in% grupos)) %>%
mutate(total_total = as.character(total_total),
total_total = str_replace_all(total_total,"\\.",""),
total_total = str_replace_all(total_total,",","\\."),
total_total = as.numeric(total_total),
total_total = round(total_total/1000000000,3))
column(4,
selectInput("teste", label = "Grupo Mutuário",
choices = agrupador_total_formatado$Classificador, selected = agrupador_total$Classificador[1])
)
column(4,
selectInput("mutuario", label = "Mutuário",
choices = agrupador_total$Inicio)
)
vida <- reactive({
list(input$teste, input$mutuario)
})
observeEvent(vida(),{
if(input$teste != "Todos"){
correto <- agrupador_total %>%
filter(Inicio == input$teste) }
observe({
updateSelectInput(session, "mutuario",
label = "Referência (anos)",
choices = correto$Inicio,
selected = correto$Inicio[1] )
})
})
print(input$teste)
column(4,
selectInput("teste", label = "Grupo Mutuário",
choices = agrupador_total_formatado$Classificador, selected = agrupador_total$Classificador[1])
)
column(4,
selectInput("mutuario", label = "Mutuário",
choices = agrupador_total$Inicio)
)
# vida <- reactive({
#
#       list(input$teste, input$mutuario)
#
#     })
#
#
#
# observeEvent(vida(),{
#
#   print(input$teste)
#
#   if(input$teste != "all"){
#
#         correto <- agrupador_total %>%
#
#           filter(Classificador == input$teste) }
#
#
#          observe({
#      updateSelectInput(session, "mutuario",
#                        label = "Referência (anos)",
#                        choices = correto$Inicio,
#                        selected = correto$Inicio[1] )
#    })
#
# })
library(shiny)
library(readxl)
library(tidyr)
library(knitr)
library(lubridate)
library(ggplot2)
library(plotly)
library(stringr)
library(dplyr)
library(shinydashboard)
library(flexdashboard)
library(bizdays)
library(matrixStats)
library(rlang)
library(rmarkdown)
library(kableExtra)
library(hpackedbubble)
load("Garantias.Rdata", envir=.GlobalEnv)
funcao_formata_quantidade <- function(x){
paste0(format(round(x/1000000, 2), big.mark = ".", decimal.mark = ","))
}
formata <- function(x){
paste0("R$", format(round(x, 2), big.mark = ".", decimal.mark = ","), " mi")
}
```{r include = FALSE}
knitr::opts_chunk$set(echo=FALSE)
knitr::opts_chunk$set(echo=FALSE)
###  Garantias: O que são e o porque isso importa na sua vida - uma breve história em Números
<p class="disclaimer">Saiba mais e nos acompanhe no Twitter/Instagram/Facebook</p>
***
## Você Sabia?
**Estados**, **Municípios**, **Estatais Federais**, **Bancos Federais** e demais **Entidades controladas** possuem dívidas com instituições financeiras que são garantidas pela União. Ou seja, na prática, caso alguma dessas entidades acima não realize o devido pagamento de suas dívidas, a União realiza o <span class="conceito" id="conceito-ressarcimento">ressarcimento</span> em nome desta ao respectivo credor. Agora, porque eu devo me importar com isso?
<div class="descricao" id="descricao-ressarcimento">
<p class="titulo-card"> Ressarcimento </p>
<p>No caso de a União se deparar com a honra de uma garantia, a obrigação efetivamente se torna da União, como qualquer outra dívida em mercado lançada pelo Tesouro Nacional. Por isso, a dívida garantida constitui um passivo contingente da União. Após o pagamento da garantia dada ao credor, acionam-se as contragarantias previstas contratualmente para recuperação dos valores despendidos. Assim, a Secretaria do Tesouro Nacional monitora eventuais atrasos, estabelecendo prazos para regularização das pendências e alertando os devedores para as sanções, penalidades e consequências previstas nos contratos e na legislação pertinente.
Assim,importa conhecer as características do endividamento, bem como os custos e riscos associados a esse passivo.
</p>
<p class="fechar-card"><a class="link-fechar" id="fechar-declaram" href="#conceito-declaram">^ Fechar e voltar ao texto ^</a></p>
</div>
É importante que a população saiba se seu **Estado /Munícipio** (e suas respectivas entidades controladas) estejam pagando  as suas contas (entre elas suas <span class="conceito" id="conceito-declaram">dívidas</span>) em dia. Esses pagamentos são a origem dos recursos que são utilizados no provimento de serviços públicos como **sáude, educação, seguraça** entre outros. Então, casos os entes estejam em dificuldade em pagar suas obrigações este é um primeiro sinal de que algum problema possa estar ocorrendo com as <span class="conceito" id="conceito-RRF">finanças da sua cidade</span>. E isso traz graves consequencias para nossas vidas. Já pensou não ter dinheiro para pagar hospitais, escolas, estradas?
<div class="descricao" id="descricao-declaram">
<p class="titulo-card">O Que É uma dívida?</p>
<p>Dívidas nada mais são do que compromissos (financeiros) nos quais um agente, ao receber recurso de um outro agente (terceiro), se compromete a devolver tal quantia acrescida de um determinado valor (ou seja, os juros/ encargos). Chama-se assim de **Mutuário** aqueles que captam algum tipo de dívida e de **Credor** aquele que empresta. Isso de fato acontece a toda hora entre indivíduos/empresas em uma sociedade. Pois bem, a mesma situação pode ocorrer entre um Município e um credor privado / público (banco, organismo multilateral, etc..).
</p>
<p class="fechar-card"><a class="link-fechar" id="fechar-declaram" href="#conceito-declaram">^ Fechar e voltar ao texto ^</a></p>
</div>
<div class="descricao" id="descricao-RRF">
<p class="titulo-card">Regime de Recuperação Fiscal (RRF)</p>
<p>O Regime de Recuperação Fiscal (RRF), aprovado pela Lei Complementar 159/2017, foi criado para fornecer aos Estados com grave desequilíbrio financeiro os  instrumentos para o ajuste de suas contas. Dessa forma, ele complementa e fortalece a Lei de Responsabilidade Fiscal, que não trazia até então previsão para o tratamento dessas situações.
De acordo com o RRF, o desequilíbrio financeiro é considerado grave quando a Receita Corrente Líquida (RCL) anual do Estado é menor do que a Dívida Consolidada ao final do último exercício; quando o somatório das suas despesas com pessoal, juros e amortizações é igual ou maior que 70% da RCL; e quando o valor total de obrigações é superior ao valor das disponibilidades de caixa. Assim, só poderá aderir ao RRF o Estado que cumprir esses três requisitos de entrada. Para saber sobre a apuração dos requisitos de adesão para cada Estado, clique aqui.
Para conhecer o processo de adesão, os instrumentos de recuperação e as vedações do Regime, bem como entender o que é o Plano de Recuperação Fiscal, acesse o Manual de Adesão disponível na sessão Publicações ao final desta página.
</p>
<p class="fechar-card"><a class="link-fechar" id="fechar-declaram" href="#conceito-declaram">^ Fechar e voltar ao texto ^</a></p>
</div>
E uma das contas que os entes deixam de pagar é exatamente a suas dívidas com terceiros. Como veremos mais adiante, desde janeiro 2016  até **data referência**, a União já teve que arcar com aproximadamente <a href="http://www.tesouro.fazenda.gov.br/-/relatorios-garantias-e-contratacoes-diretas" class="link-painel" target="blank">R$ 45 Bilhões </a> (valores nominais). E, pelas últimas informações disponíveis (**data referência**), temos um estoque de <a href="http://www.tesouro.fazenda.gov.br/-/relatorios-garantias-e-contratacoes-diretas" class="link-painel" target="blank">R$ 1231231 Bilhões </a> que atualemnte são garantidas pelo União (Tesouro Nacional)
Nesse ponto, imagino algumas perguntas: Quais Estados / Municípios não pagaram suas dívidas ? Quem possui o maior estoque de dívida garantida pela União? O Tesouro Nacional garante toda e qualquer dívida dos Estados / Municípios / Bancos Federais? Como é feito esse acompanhamento?
Vamos responder a cada pergunta, mas antes é importante destacar que por meio do [**Relatório Quadrimestral de Operações de Crédito Garantidas (RQG)**](http://www.tesouro.fazenda.gov.br/-/relatorios-garantias-e-contratacoes-diretas) e do [**Relatório Mensal de Garantias Honradas**](http://www.tesouro.fazenda.gov.br/-/relatorios-garantias-e-contratacoes-diretas), o Tesouro Nacional dá publicidade aos principais números e análises referentes a garantidas concedidas. [**Lá**](http://www.tesouro.fazenda.gov.br/-/relatorios-garantias-e-contratacoes-diretas) você pode encontrar o detalhamento da base de dados além de mais informações sobre o assunto.
Ok, vamos, então, ao que interessa. Esperamos que ao final, tenhamos contribuido para que você esteja mais capacitado para entender e acompanhar situações onde seu **Município / Estado** tenha compromissos financeiros honrados pela União.
## Quanto de Dívida dos Estados / Municípios / Entidades Controladas que a União garante o pagamento?
```{r grafico, warning=FALSE, message=FALSE ,fig.width=9, fig.height=7 }
grupos <- c("Todas","Estados", "Bancos Federais", "Municípios","Estatais Federais","Entidades Estaduais Controladas","Empresas Privatizadas")
agrupador_total_formatado <- agrupador_total %>%
filter(!(Inicio %in% grupos)) %>%
mutate(total_total = as.character(total_total),
total_total = str_replace_all(total_total,"\\.",""),
total_total = str_replace_all(total_total,",","\\."),
total_total = as.numeric(total_total),
total_total = round(total_total/1000000000,3))
a
Viwe(a)
View(a)
correto
View(agrupador_atm_completo)
numero(agrupador_atm_completo$ATM_Total)
grupos <- c("Todas","Estados", "Bancos Federais", "Municípios","Estatais Federais","Entidades Estaduais Controladas","Empresas Privatizadas")
agrupador_total_formatado <- agrupador_total %>%
filter(!(Inicio %in% grupos)) %>%
mutate(total_total = as.character(total_total),
total_total = str_replace_all(total_total,"\\.",""),
total_total = str_replace_all(total_total,",","\\."),
total_total = as.numeric(total_total),
interna_total = numero(interna_total),
interna_USD = numero(interna_USD),
externa_total = numero(externa_total)
)
agrupador_atm_formatado <- agrupador_atm_completo %>%
mutate(ATM_Total = numero(ATM_Total))
# hpackedbubble(agrupador_total_formatado$Classificador, agrupador_total_formatado$Inicio, agrupador_total_formatado$total_total,
#               title = "Dívidas Garantidas pela União",
#               pointFormat = "<b>{point.name}:</b>R$ {point.y} Bilhões ",
#               dataLabelsFilter = 0.1,
#               packedbubbleMinSize = "10%",
#               packedbubbleMaxSize = "200%",
#               theme = "sunset",
#               packedbubbleZMin = 0,
#               packedbubbleZmax = 1000, split = 1,
#               gravitational = 0.02,
#               parentNodeLimit = 1,
#               dragBetweenSeries = 0,
#               seriesInteraction = 0,
#                width = "100%")
numero <- function(x){
a <- as.character(x)
b <- str_replace_all(a,"\\.","")
c <- str_replace_all(b,",","\\.")
d <- as.numeric(c)
return(d)
numero(agrupador_atm_completo$ATM_Total)
agrupador_atm_completo$ATM_Total
agrupador_atm_completo$ATM_Total
agrupador_atm_completo
Viww(agrupador_atm_completo)
agrupador_atm_completo
numero(agrupador_atm_completo$ATM_Total)
View(agrupador_custo_completo)
View(agrupador_percentual_vincendo)
shiny::runApp('teste')
runApp('teste')
runApp('testeteste')
runApp('testeteste')
runApp('testeteste')
runApp('testeteste')
runApp()
runApp()
runApp()
runApp()
runApp('testeteste')
runApp()
runApp('testeteste')
runApp()
runApp('testeteste')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/Central de Apostas/Central_apostas')
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/Central de Apostas/Central_apostas')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/Central de Apostas/Central_apostas')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/Central de Apostas/teste')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/Central de Apostas/teste')
runApp()
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/Central de Apostas/teste')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/Central de Apostas/teste')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/Central de Apostas/teste')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/Central de Apostas/teste')
runApp()
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/Central de Apostas/teste')
runApp('C:/Users/lucas.leite/Desktop/Lucas/RStudio/Central de Apostas/Central_apostas')
